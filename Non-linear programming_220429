#비선형 함수의 최적화; 일변량 함수

import numpy as np
import scipy
from scipy.optimize import minimize, Bounds

fun = lambda x: (x[0]-1)*(x[0]-2)*(x[0]-3)*(x[0]-4)
limits = Bounds(np.array([3]), np.array([4]))
x0 = np.array([3])
sol = minimize(fun, x0, bounds = limits)
print(sol)

#비선형 함수의 최적화; 다변량 함수

import numpy as np
from scipy.optimize import minimize, Bounds
fun = lambda x: 100*((x[0]-x[1]**2))**2+(1-x[0])**2
cons = {'type':'eq','fun': lambda x: 2*x[0]+x[1]-1}
bnd = Bounds(np.array([0,-0.5]), np.array([1,2]))
x0 = np.array((0,0])
sol = minimize(fun, x0, bounds = bnd, constraints = cons)
print(sol)
